// Mocks generated by Mockito 5.4.4 from annotations
// in telegram/test/auth/signup_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/material.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:telegram/core/error/faliure.dart' as _i6;
import 'package:telegram/core/network/network_manager.dart' as _i9;
import 'package:telegram/core/validator/app_validator.dart' as _i11;
import 'package:telegram/feature/auth/signup/data/model/sign_up_body_model.dart'
    as _i7;
import 'package:telegram/feature/auth/signup/domain/repositories/sign_up_repo.dart'
    as _i2;
import 'package:telegram/feature/auth/signup/domain/use_cases/check_recaptcha_tocken.dart'
    as _i15;
import 'package:telegram/feature/auth/signup/domain/use_cases/register_use_case.dart'
    as _i5;
import 'package:telegram/feature/auth/signup/domain/use_cases/save_register_info_use_case.dart'
    as _i8;
import 'package:telegram/feature/auth/signup/presentation/widget/not_robot.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSignUpRepository_0 extends _i1.SmartFake
    implements _i2.SignUpRepository {
  _FakeSignUpRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i4.StreamSubscription<T> {
  _FakeStreamSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i5.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignUpRepository get signUpRepo => (super.noSuchMethod(
        Invocation.getter(#signUpRepo),
        returnValue: _FakeSignUpRepository_0(
          this,
          Invocation.getter(#signUpRepo),
        ),
      ) as _i2.SignUpRepository);

  @override
  _i4.Future<_i3.Either<_i6.Failure, String>> call(
          _i7.SignUpBodyModel? parameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [parameter],
        ),
        returnValue: _i4.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [parameter],
          ),
        )),
      ) as _i4.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [SaveRegisterInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveRegisterInfoUseCase extends _i1.Mock
    implements _i8.SaveRegisterInfoUseCase {
  MockSaveRegisterInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignUpRepository get signUpRepo => (super.noSuchMethod(
        Invocation.getter(#signUpRepo),
        returnValue: _FakeSignUpRepository_0(
          this,
          Invocation.getter(#signUpRepo),
        ),
      ) as _i2.SignUpRepository);

  @override
  set signUpRepo(_i2.SignUpRepository? _signUpRepo) => super.noSuchMethod(
        Invocation.setter(
          #signUpRepo,
          _signUpRepo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i3.Either<_i6.Failure, String>> call(
          _i7.SignUpBodyModel? parameter) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [parameter],
        ),
        returnValue: _i4.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [parameter],
          ),
        )),
      ) as _i4.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i9.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.ConnectivityResult get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i10.ConnectivityResult.bluetooth,
      ) as _i10.ConnectivityResult);

  @override
  set connectionStatus(_i10.ConnectivityResult? _connectionStatus) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectionStatus,
          _connectionStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.StreamSubscription<List<_i10.ConnectivityResult>>
      get connectivitySubscription => (super.noSuchMethod(
            Invocation.getter(#connectivitySubscription),
            returnValue:
                _FakeStreamSubscription_2<List<_i10.ConnectivityResult>>(
              this,
              Invocation.getter(#connectivitySubscription),
            ),
          ) as _i4.StreamSubscription<List<_i10.ConnectivityResult>>);

  @override
  set connectivitySubscription(
          _i4.StreamSubscription<List<_i10.ConnectivityResult>>?
              _connectivitySubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectivitySubscription,
          _connectivitySubscription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i10.ConnectivityResult> get connectionStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatusStream),
        returnValue: _i4.Stream<_i10.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i10.ConnectivityResult>);

  @override
  _i4.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppValidator extends _i1.Mock implements _i11.AppValidator {
  MockAppValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isFormValid(_i12.GlobalKey<_i12.FormState>? formKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFormValid,
          [formKey],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [RecaptchaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecaptchaService extends _i1.Mock implements _i13.RecaptchaService {
  MockRecaptchaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get siteKey => (super.noSuchMethod(
        Invocation.getter(#siteKey),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#siteKey),
        ),
      ) as String);

  @override
  _i4.Future<bool> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String?> executeRecaptcha(String? action) => (super.noSuchMethod(
        Invocation.method(
          #executeRecaptcha,
          [action],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> handleRecaptcha() => (super.noSuchMethod(
        Invocation.method(
          #handleRecaptcha,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [CheckRecaptchaTocken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckRecaptchaTocken extends _i1.Mock
    implements _i15.CheckRecaptchaTocken {
  MockCheckRecaptchaTocken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignUpRepository get signUpRepo => (super.noSuchMethod(
        Invocation.getter(#signUpRepo),
        returnValue: _FakeSignUpRepository_0(
          this,
          Invocation.getter(#signUpRepo),
        ),
      ) as _i2.SignUpRepository);

  @override
  set signUpRepo(_i2.SignUpRepository? _signUpRepo) => super.noSuchMethod(
        Invocation.setter(
          #signUpRepo,
          _signUpRepo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i3.Either<_i6.Failure, bool>> call(String? recaptchaToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [recaptchaToken],
        ),
        returnValue: _i4.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [recaptchaToken],
          ),
        )),
      ) as _i4.Future<_i3.Either<_i6.Failure, bool>>);
}
